<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链式运算符|NULL运算符</title>
      <link href="2021/11/28/lian-shi-yun-suan-fu-null-yun-suan-fu/"/>
      <url>2021/11/28/lian-shi-yun-suan-fu-null-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://link.juejin.cn/?target=https://github.com/tc39/proposal-optional-chaining">ES2020</a> </p><h3 id="链判断运算符"><a href="#链判断运算符" class="headerlink" title="链判断运算符   ?."></a>链判断运算符   ?.</h3><p><strong>1. **</strong>判断一下该对象是否存在**</p><ul><li>读取 message.body.user.firstName</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> firstName <span class="token operator">=</span>  <span class="token punctuation">(</span>message <span class="token operator">&amp;&amp;</span>    message<span class="token punctuation">.</span>body <span class="token operator">&amp;&amp;</span>    message<span class="token punctuation">.</span>body<span class="token punctuation">.</span>user <span class="token operator">&amp;&amp;</span>    message<span class="token punctuation">.</span>body<span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token string">"default"</span><span class="token punctuation">;</span><span class="token keyword">const</span> firstName <span class="token operator">=</span> message<span class="token operator">?.</span>body<span class="token operator">?.</span>user<span class="token operator">?.</span>firstName <span class="token operator">||</span> <span class="token string">"default"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>释:直接在链式调用的时候判断，左侧的对象是否为 null 或 undefined。如果是的，就不再往下运算，而是返 undefined。</li></ul><p><strong>2. 判断对象方法是否存在</strong></p><pre class="line-numbers language-none"><code class="language-none">iterator.return?.()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>释:iterator.return 如果有定义，就会调用该方法，否则 iterator.return 直接返回 undefined，不再执行?.后面的部分</li></ul><p><strong>参考:**</strong><a href="https://juejin.cn/post/6867691960452022280">https://juejin.cn/post/6867691960452022280</a></p><h3 id="NULL运算符"><a href="#NULL运算符" class="headerlink" title="NULL运算符"></a>NULL运算符</h3><ul><li>读取对象属性的时候，如果某个属性的值是 null 或 undefined，有时候需要为它们指定默认值。</li></ul><p><strong>常见做法是通过**</strong>||*<strong>*运算符指定默认值。</strong></p><p>注:属性的值如果为空字符串或 false 或 0，默认值也会生效。</p><p><a href="https://link.juejin.cn/?target=https://github.com/tc39/proposal-nullish-coalescing"><strong>ES2020</strong></a> <strong>引入了**</strong>一个新的 Null 判断运*<strong>*算符**</strong>??*<strong>*。</strong></p><p>它的行为类似||，但是只有运算符左侧的值为 null 或 undefined 时，才会返回右侧的值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> animationDuration <span class="token operator">=</span> response<span class="token punctuation">.</span>settings<span class="token operator">?.</span>animationDuration <span class="token operator">??</span> <span class="token number">300</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释:如果 response.settings 是 null 或 undefined，或者 response.settings.animationDuration 是 null 或 undefined，就会返回默认值 300。也就是说，这一行代码包括了两级属性的判断。</p>]]></content>
      
      
      <categories>
          
          <category> ES </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>筛选回显</title>
      <link href="2021/11/28/shai-xuan-hui-xian/"/>
      <url>2021/11/28/shai-xuan-hui-xian/</url>
      
        <content type="html"><![CDATA[<p>在写筛选页面时，有碰到一个需求是需要每次按筛选是需要记住上次的选项，这是自己想了很久后写出的代码，现在记录一下</p><ol><li><p>创建一个 Map 对象 obj=new Map() 根据具体情况设置类型</p></li><li><p>筛选传入的值需要深拷贝(传入的值通常为 key value 的形式) selectObj</p></li><li><p>通过遍历将 selectObj 的值复制给 obj</p></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>keys<span class="token punctuation">[</span>selectObj<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//判断传入的值是否为空   如果是第一次或者是重置后此值为空</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> selectObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> selectObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> val <span class="token keyword">in</span> props<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span>queryValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重置每个数据都为第一个选项</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>将这个值设置为选项值</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node中的export</title>
      <link href="2021/11/28/node-zhong-de-export/"/>
      <url>2021/11/28/node-zhong-de-export/</url>
      
        <content type="html"><![CDATA[<h6 id="一种方式是将对象赋值给-module-exports（这是模块系统提供的对象），这会使文件只导出该对象"><a href="#一种方式是将对象赋值给-module-exports（这是模块系统提供的对象），这会使文件只导出该对象" class="headerlink" title="一种方式是将对象赋值给 module.exports（这是模块系统提供的对象），这会使文件只导出该对象"></a>一种方式是将对象赋值给 module.exports（这是模块系统提供的对象），这会使文件只导出该对象</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token punctuation">&#123;</span> brand<span class="token operator">:</span> <span class="token string">"Ford"</span><span class="token punctuation">,</span> model<span class="token operator">:</span> <span class="token string">"Fiesta"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> car<span class="token punctuation">;</span> <span class="token comment">//在另一个文件中 const car = require('./car')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="第二种方式是将要导出的对象添加为-exports-的属性。这种方式可以导出多个对象、函数或数据："><a href="#第二种方式是将要导出的对象添加为-exports-的属性。这种方式可以导出多个对象、函数或数据：" class="headerlink" title="第二种方式是将要导出的对象添加为 exports 的属性。这种方式可以导出多个对象、函数或数据："></a>第二种方式是将要导出的对象添加为 exports 的属性。这种方式可以导出多个对象、函数或数据：</h6><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token punctuation">&#123;</span> brand<span class="token operator">:</span> <span class="token string">"Ford"</span><span class="token punctuation">,</span> model<span class="token operator">:</span> <span class="token string">"Fiesta"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>car <span class="token operator">=</span> <span class="token punctuation">&#123;</span> brand<span class="token operator">:</span> <span class="token string">"Ford"</span><span class="token punctuation">,</span> model<span class="token operator">:</span> <span class="token string">"Fiesta"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//另一个文件中 const items = require('./items')</span>items<span class="token punctuation">.</span>car<span class="token punctuation">;</span><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./items"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>car<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="module-exports-和-export-之间有什么区别？"><a href="#module-exports-和-export-之间有什么区别？" class="headerlink" title="module.exports 和 export 之间有什么区别？"></a>module.exports 和 export 之间有什么区别？</h6><p>前者公开了它指向的对象。 后者公开了它指向的对象的属性。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初识webpack</title>
      <link href="2021/11/27/chu-shi-webpack/"/>
      <url>2021/11/27/chu-shi-webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack-是基于-JavaScript-的应用程序的模块静态打包工具"><a href="#webpack-是基于-JavaScript-的应用程序的模块静态打包工具" class="headerlink" title="webpack 是基于 JavaScript 的应用程序的模块静态打包工具"></a>webpack 是基于 JavaScript 的应用程序的模块静态打包工具</h3><p>当他处理程序时,他会从内部的一个或多个入口去构建依赖图(每当一个文件依赖一个文件,webpack 会直接认为他们存在直接依赖关系.当 他 处理应用程序时，它会根据命令行参数中或配置文件中定义的模块列表开始处理。 从 <a href="https://webpack.docschina.org/concepts/entry-points/"><strong>入口</strong></a> 开始，webpack 会递归的构建一个 <strong>依赖关系图</strong>，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为少量的 <strong>bundle</strong> —— 通常只有一个 —— 可由浏览器加载)</p><p><strong>1.入口(entry)</strong></p><ul><li><ul><li>作为依赖图的开始的文件,默认值为./src/index.js 可以通过 webpack.config.js 中的 entry 属性去设置一个或多个入口.</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span> entry<span class="token operator">:</span> <span class="token string">"./path/to/my/entry/file.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.输出(output)</strong></p><ul><li>作为 webpack 的 bundle 输出的位置,以及如何命名.</li><li>__dirname”是 node.js 中的一个全局变量，它指向当前执行脚本所在的目录</li><li>默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。(配置在 webpack.config.js)</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//引入node的path模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">"./path/to/my/entry/file.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//当前执行脚本所在的目录下的 dist文件夹中</span>    filename<span class="token operator">:</span> <span class="token string">"my-first-webpack.bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于 path.resolve 的判断</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"/foo/a"</span><span class="token punctuation">,</span> <span class="token string">"./b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns '/foo/a/b'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"/foo/a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns '/foo/a/b'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"/foo/a"</span><span class="token punctuation">,</span> <span class="token string">"/b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns '/b'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"/foo/a"</span><span class="token punctuation">,</span> <span class="token string">"../b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns '/foo/b'</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">,</span> <span class="token string">"/foo/a"</span><span class="token punctuation">,</span> <span class="token string">"../b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns '/foo/b' path.resolve('home','./foo/a', '../b')   // returns '/home/foo/b' path.resolve('home','foo/a', '../b')   // returns '/home/foo/b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符以 / 开头: 不会拼接到前面的路径(因为拼接到此已经是一个绝对路径)；</li><li>以 …/ 开头: 拼接前面的路径，且不含最后一节路径；</li><li>以 ./ 开头: 或者没有符号 则拼接前面路径 。</li><li>如果在处理完所有给定的 path 片段之后还未生成绝对路径，则再加上当前工作目录</li></ul><p><strong>3.loader</strong></p><ul><li><ul><li>webpack 只能识别 JavaScript 和 json 文件.loader 可以使 webpack 去识别其他的文件类型,并将他们转化为有效的模块,以供应用程序使用和能被添加到依赖图中.</li></ul></li></ul><p>在 webpack 中 loader 有两个属性:</p><ol><li>test:识别出哪些文件类型会被转化</li><li>use:使用什么 loader 去进行转化</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">"my-first-webpack.bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">"raw-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//碰到「在 require()/import 语句中被解析为 '.txt' 的路径」时，在你对它打包之前，先 use(使用) raw-loader 转换一下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.插件(plugin)</strong></p><ul><li>可以处理打包优化,资源管理,注入环境变量</li><li>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 npm 安装</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于访问内置插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">"raw-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> template<span class="token operator">:</span> <span class="token string">"./src/index.html"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用插件</strong></p><ol><li><p><strong>html-webpack-plugin:生成 HTML 文件</strong></p></li><li><p><strong>copy-webpack-plugin:**</strong>在 webpack 中拷贝文件和文件夹**</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">from</span>    定义要拷贝的源文件 <span class="token keyword">from</span>：__dirname<span class="token operator">+</span><span class="token string">'/src/components'</span> to      定义要拷贝到的目标文件夹to<span class="token operator">:</span> __dirname<span class="token operator">+</span><span class="token string">'/dist'</span> toType  file 或者 dir  可选，默认是文件 force   强制覆盖前面的插件   可选，默认是文件context 可选，默认base   context可用specific  context flatten  只拷贝指定的文件  可以用模糊匹配 ignore  忽略拷贝指定的文件  可以模糊匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>friendly-errors-webpack-plugin(优化控制台)</strong></p></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// ...</span>    <span class="token keyword">new</span> <span class="token class-name">FriendlyErrorsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 成功的时候输出</span>        compilationSuccessInfo<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            messages<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your application is running here: http://localhost:8080</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 是否每次都清空控制台</span>        clearConsole<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>    devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        contentBase<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>        port<span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>        open<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        quiet<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 如果使用webpack-dev-server，需要设为true，禁止显示devServer的console信息  &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>webpack-merge(**有效地管理配置文件的方法</strong>)**</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> prodEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./prod.env"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodEnv<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token string">'"development"'</span><span class="token punctuation">,</span>  <span class="token constant">API_ROOT</span><span class="token operator">:</span> <span class="token string">'"https://testqipei.baijiayun.com/"'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5. Hot Module Replacement(热模块替换)</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    devtool<span class="token operator">:</span> <span class="token string">'cheap-module-eval-source-map'</span><span class="token punctuation">,</span>    devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        contentBase<span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>        open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        hot<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        hotOnly<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            template<span class="token operator">:</span> <span class="token string">'src/index.html'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//1.我们需要在devServer中开启HMR功能，即hot: true，意思是我们开启了HMR功能，</span>    <span class="token comment">//2.配套的我们也开启hotOnly: true意为即使是HMR没有生效，我们也不去刷新页面。</span>    <span class="token comment">//3.我们引入webpack，然后从中引入HotModuleReplacementPlugin并配置。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.NamedModulesPlugin(热加载直接返回更新的文件名,而不是 id)</strong></p><p><strong>5.模式(mode)</strong></p><ul><li><ul><li>通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高阶组件</title>
      <link href="2021/06/25/gao-jie-zu-jian/"/>
      <url>2021/06/25/gao-jie-zu-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是高阶组件？"><a href="#什么是高阶组件？" class="headerlink" title="什么是高阶组件？"></a>什么是高阶组件？</h4><pre class="line-numbers language-none"><code class="language-none">高阶组件是接受React组件作为参数，并返回一个新的React组件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="高阶组件解决的问题？"><a href="#高阶组件解决的问题？" class="headerlink" title="高阶组件解决的问题？"></a>高阶组件解决的问题？</h4><pre class="line-numbers language-none"><code class="language-none">高阶组件解决了不同组件要从同一个组件中获取数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="高阶组件的例子"><a href="#高阶组件的例子" class="headerlink" title="高阶组件的例子"></a>高阶组件的例子</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getLocalStorageDate</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">&#123;</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 通过&#123;...this.props&#125; 把传递给当前组件的属性继续传递给被包装的组件WrappedComponent</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyComponent2</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ComponentWithLocalStorage <span class="token operator">=</span> <span class="token function">getLocalStorageDate</span><span class="token punctuation">(</span>MyComponent2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">getLocalStorageDate是一个高阶组件，接受了MyComponent2组件作为参数，返回给ComponentWithLocalStorage组件由于在组件MyComponent2中使用props.data接受了父组件（此时相当于从getLocalStorageDate组件中获取）的值在App.js中调用&lt;ComponentWithLocalStorage&#x2F;&gt;可获取data值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="高阶组件的参数并非只能是一个值，还可以传入其他的值"><a href="#高阶组件的参数并非只能是一个值，还可以传入其他的值" class="headerlink" title="高阶组件的参数并非只能是一个值，还可以传入其他的值"></a>高阶组件的参数并非只能是一个值，还可以传入其他的值</h4><h4 id="高阶组件传入其他参数例子"><a href="#高阶组件传入其他参数例子" class="headerlink" title="高阶组件传入其他参数例子"></a>高阶组件传入其他参数例子</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">withPersistentData</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">&#123;</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 通过&#123;...this.props&#125; 把传递给当前组件的属性继续传递给被包装的组件WrappedComponent</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyComponent2</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//省略其他逻辑...</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyComponent3</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//省略其他逻辑...</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> MyComponent2WithPersistentData <span class="token operator">=</span> <span class="token function">withPersistentData</span><span class="token punctuation">(</span>MyComponent2<span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyComponent3WithPersistentData <span class="token operator">=</span> <span class="token function">withPersistentData</span><span class="token punctuation">(</span>MyComponent3<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HOC-常见用法"><a href="#HOC-常见用法" class="headerlink" title="HOC 常见用法"></a>HOC 常见用法</h4><p><code>高阶组件常用的函数签名形式是：</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token punctuation">[</span>param<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// React Redux's `connect`</span><span class="token keyword">const</span> ConnectedComment <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>commentSelector<span class="token punctuation">,</span> commentActions<span class="token punctuation">)</span><span class="token punctuation">(</span>CommentList<span class="token punctuation">)</span><span class="token punctuation">;</span>相当于<span class="token punctuation">;</span><span class="token comment">// connect is a function that returns another function</span><span class="token keyword">const</span> enhance <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>commentListSelector<span class="token punctuation">,</span> commentListActions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// The returned function is an HOC, which returns a component that is connected</span><span class="token comment">// to the Redux store</span><span class="token keyword">const</span> ConnectedComment <span class="token operator">=</span> <span class="token function">enhance</span><span class="token punctuation">(</span>CommentList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高阶组件的父组件的区别"><a href="#高阶组件的父组件的区别" class="headerlink" title="高阶组件的父组件的区别"></a>高阶组件的父组件的区别</h4><pre class="line-numbers language-none"><code class="language-none">有些同学可能会觉得高阶组件有些类似父组件的使用。例如，我们完全可以把高阶组件中的逻辑放到一个父组件中去执行，执行完成的结果再传递给子组件。从逻辑的执行流程上来看，高阶组件确实和父组件比较相像，但是高阶组件强调的是逻辑的抽象。高阶组件是一个函数，函数关注的是逻辑；父组件是一个组件，组件主要关注的是UI&#x2F;DOM。如果逻辑是与DOM直接相关的，那么这部分逻辑适合放到父组件中实现；如果逻辑是与DOM不直接相关的，那么这部分逻辑适合使用高阶组件抽象。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React跨组件传值</title>
      <link href="2021/06/16/react-kua-zu-jian-chuan-zhi/"/>
      <url>2021/06/16/react-kua-zu-jian-chuan-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要跨组件传值？"><a href="#为什么要跨组件传值？" class="headerlink" title="为什么要跨组件传值？"></a>为什么要跨组件传值？</h4><pre class="line-numbers language-在单纯的父子传参中" data-language="在单纯的父子传参中"><div class="caption"><span>this.props 就可以了。子传父也是通过调用父组件的方法去改变参数变化,假如在企业项目中不</span></div><code class="language-在单纯的父子传参中">只是单纯的父子传参，还有爷爷组件和孙子组件或者重孙玄孙甚至可能...玄玄玄孙等等，就好比自己的亲戚的七大姑八大姨一样错综复杂，所以这时候 React 提供了一个非常简便和实用的东西<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h3><h4 id="1-利用-react-脚手架搭建一个项目"><a href="#1-利用-react-脚手架搭建一个项目" class="headerlink" title="1.利用 react 脚手架搭建一个项目"></a>1.利用 react 脚手架搭建一个项目</h4><h4 id="2-创建-test1-js-test2-js-context-js"><a href="#2-创建-test1-js-test2-js-context-js" class="headerlink" title="2.创建 test1.js test2.js context.js"></a>2.创建 test1.js test2.js context.js</h4><h4 id="3-context-js-文件内容"><a href="#3-context-js-文件内容" class="headerlink" title="3.context.js 文件内容"></a>3.context.js 文件内容</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">var</span> context <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> context<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-App-js-文件内容"><a href="#4-App-js-文件内容" class="headerlink" title="4.App.js 文件内容"></a>4.App.js 文件内容</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"我是爷爷"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Test1 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-Test1-js-文件内容"><a href="#5-Test1-js-文件内容" class="headerlink" title="5.Test1.js 文件内容"></a>5.Test1.js 文件内容</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Tets2 <span class="token keyword">from</span> <span class="token string">"./Tets2"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        test1        <span class="token operator">&lt;</span>Tets2 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-Tets2-js-文件内容"><a href="#6-Tets2-js-文件内容" class="headerlink" title="6.Tets2.js 文件内容"></a>6.Tets2.js 文件内容</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">"./context"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Tets2</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>          <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Test2接受到值"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>        <span class="token punctuation">;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-运行项目"><a href="#7-运行项目" class="headerlink" title="7.运行项目"></a>7.运行项目</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>须将需要接收值的组件包裹在 Provider 内,这样所有内层组件都可以接收到这个 value 值，通俗的讲就是数据的入口。</li><li>接收值的组件,利用 Consumer 组件接收值,内部是个函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次笔试(下)</title>
      <link href="2021/03/16/di-yi-ci-bi-shi-xia/"/>
      <url>2021/03/16/di-yi-ci-bi-shi-xia/</url>
      
        <content type="html"><![CDATA[<p>对这次碰到的笔试题目，进行学习一波后写了这篇博客（题目顺序不是跟着上篇的）</p><h2 id="1-typeof与instanceof的区别"><a href="#1-typeof与instanceof的区别" class="headerlink" title="1.typeof与instanceof的区别"></a>1.typeof与instanceof的区别</h2><ul><li>typeof 一般只能六种返回值：number  string boolean  object  function undefined </li><li>注意：typeof(null)—&gt;object   typeof(NaN)—-&gt;number   typeof(undefined)—–&gt;undefined</li><li>instanceof : A instanceof B —&gt; 看A对象的原型链上有没有B原型或A对象是不是B构造函数构造出的对象<br>用instanceof可以具体知道是Array还是object也就是能分清[] {}两种对象</li><li>扩展：区分 {} [] 三种方法<ol><li>[].constructor—-&gt;function Array()<br>{}.constructor—-&gt;function object()</li><li>[] instanceof Array—&gt;true<br>{}  instanceof Array—-&gt;false</li><li>object.prototype.toString.call([])—-&gt;[object Array]<br>object.prototype.toString.call({})—-&gt;[object Object]</li></ol></li></ul><h2 id="2-div盒模型"><a href="#2-div盒模型" class="headerlink" title="2.div盒模型"></a>2.div盒模型</h2><ul><li>就是用来装页面上的元素的矩形区域。</li><li>CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型</li><li>两者的区别：width包含范围。<ol><li>在标准的盒子模型中，width指content部分宽度</li><li>在IE盒子模型中，width指content+padding+border这三个部分的宽度，故使得计算整个盒子得宽度时存在着差异</li></ol></li><li>计算差异：<ol><li>标准盒子模型的盒子宽度：左右border+左右padding+widtho</li><li>IE模型的盒子宽度：width</li></ol></li><li>CSS3中引入了box-sizing属性，box-sizing:content-box;表示标准的盒子模型；box-sizing:border-box;表示时IE盒子模型</li><li>CSS盒子模型本质是一个盒子，封装周围的HTML元素，它包括：边框，边距，填充和实际内容。</li><li>标准盒模型：一个块的总宽度=width+margin(左右)+padding(左右)+border(左右)</li><li>怪异盒模型：一个块的总宽度=width+margin(左右)(既width已经包含了padding和border值)</li></ul><h2 id="3-CSS选择器优先级"><a href="#3-CSS选择器优先级" class="headerlink" title="3.CSS选择器优先级"></a>3.CSS选择器优先级</h2><ul><li>id class 标签选择器，伪元素选择器(before after)，伪类选择器(first-child)</li><li>同一个元素引用了多个样式时，排在后面的优先级高</li><li>样式选择器的类型不同时，优先级顺序为：id选择器&gt;class选择器&gt;标签选择器&gt;继承选择器</li><li>带有 !important标记的样式属性优先级最高</li><li>样式表的来源不同时：优先级顺序是：内联样式》内部样式》外部样式&gt;浏览器自定义样式&gt;浏览器默认样式<h2 id="4-实现三栏布局"><a href="#4-实现三栏布局" class="headerlink" title="4.实现三栏布局"></a>4.实现三栏布局</h2></li><li><ol><li>自身浮动法：左栏左浮动，右栏右浮动，中间栏不浮动(中间栏得放在最后)</li></ol></li><li>代码：<pre class="line-numbers language-none"><code class="language-none">   &lt;style type&#x3D;&#39;text&#x2F;css&#39;&gt;   .box &#123;   display: flex;   height: 100 px;   width:300px;   &#125;   .left &#123;   float:left;   width:300px;   height: 100 px;   background-color: pink;   &#125;   .center &#123;   height: 100 px;   margin: 0 300px 0 300px;   background-color: yellow;   &#125;   .right &#123;   height: 100 px;   width:300px;   float: right;   background-color: skyblue;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;   &lt;article class&#x3D;&quot;main&quot;&gt;      &lt;div class&#x3D;&quot;left&quot;&gt;左&lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;right&quot;&gt;右&lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;center&quot;&gt;中         &lt;h2&gt;浮动布局&lt;&#x2F;h2&gt;      &lt;&#x2F;div&gt;       &lt;&#x2F;article&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="2"><li>绝对定位法：左右两栏采用绝对定位，中间用margin值撑开距离</li></ol></li><li>代码：<pre class="line-numbers language-none"><code class="language-none">&lt;style type&#x3D;&#39;text&#x2F;css&#39;&gt;   #center&#123;      margin-left: 20%;      width: 50%;      height: 100px;      background-color:aquamarine;   &#125;   #left&#123;      position: absolute;      top: 0;      left: 0;      height: 100px;      width: 20%;      background-color: aqua;   &#125;   #right&#123;      position:absolute;      height: 100px;      top: 0;      right: 0;      width: 20%;      background-color: antiquewhite;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;   &lt;div id&#x3D;&quot;center&quot;&gt;&lt;&#x2F;div&gt;   &lt;div id&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt;   &lt;div id&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-获取对象的key值"><a href="#5-获取对象的key值" class="headerlink" title="5.获取对象的key值"></a>5.获取对象的key值</h2></li><li>通过Object.keys来获取</li><li>代码：<pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];console.log(Object.keys(arr)); &#x2F;&#x2F; console: [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-Css水平居中"><a href="#6-Css水平居中" class="headerlink" title="6.Css水平居中"></a>6.Css水平居中</h2></li><li>1.绝对定位和margin-left: -(宽度值/2)实现水平居中</li><li>代码：<pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;   .content&#123;         width: 200px;         position: absolute;         left: 50%;         margin-left: -100px;          background-color: aqua;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;    &lt;div class&#x3D;&quot;content&quot;&gt;lalal&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>2.position:absolute + （left=0+top=0+right=0+bottom=0） + margin:auto</li><li>代码：<pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;   .content&#123;      position: absolute;      width: 200px;      top: 0;      right: 0;      bottom: 0;      left: 0;      margin: auto;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="3"><li>display:table+margin: auto</li></ol></li><li>代码：<pre class="line-numbers language-none"><code class="language-none">   &lt;style&gt;   .content&#123;      display: table;      margin: auto;      height: 300px;      width: 300px;      background-color: blue;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>4.position:absolute+transform</li><li>代码：<pre class="line-numbers language-none"><code class="language-none">   &lt;style&gt;   .content&#123;      position: absolute;      left: 50%;      transform: translateX(-50%); &#x2F;* 移动元素本身50% *&#x2F;      background: aqua;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>结束！！</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一次笔试上</title>
      <link href="2021/03/14/di-yi-ci-bi-shi-shang/"/>
      <url>2021/03/14/di-yi-ci-bi-shi-shang/</url>
      
        <content type="html"><![CDATA[<p>今天早早的来到图书馆，赶早的抢了个好位置，正在学习的时候，之前投过的公司的hr给我发了信息，让我发简历过去，再根据它们公司的制度填了申请资料。没想到过一会就发了笔试题。一点准备都没有，脑子蒙蒙的写完了笔试题，让我印象最深刻的问题是提高css选择器优先级的方式。感觉自己从来没有考虑过这个问题。然后写完我就感觉自己没戏了。但是还是要总结一下笔试的题目。问题如下：</p><h2 id="1-数组去重"><a href="#1-数组去重" class="headerlink" title="1.数组去重"></a>1.数组去重</h2><ul><li>我用的是我一直用的方法 Array.from(new Set(arr))<h2 id="2-实现左右固定，中间适应的方式"><a href="#2-实现左右固定，中间适应的方式" class="headerlink" title="2.实现左右固定，中间适应的方式"></a>2.实现左右固定，中间适应的方式</h2></li><li>我用的是左栏左浮动 右栏右浮动 中间栏放最后<h2 id="3-获取对象key值"><a href="#3-获取对象key值" class="headerlink" title="3.获取对象key值"></a>3.获取对象key值</h2></li><li>我写了两种 循环 object.keys()<h2 id="4-typeof与instanceof区别"><a href="#4-typeof与instanceof区别" class="headerlink" title="4.typeof与instanceof区别"></a>4.typeof与instanceof区别</h2></li><li>我大致写的是typeof返回字符串 instanceof是用于判断一个变量是否某个对象的实例<h2 id="5-css选择器优先级"><a href="#5-css选择器优先级" class="headerlink" title="5.css选择器优先级"></a>5.css选择器优先级</h2></li><li>style内部写的&gt;id&gt;class&gt;标签&gt;继承<h2 id="6-css水平居中"><a href="#6-css水平居中" class="headerlink" title="6.css水平居中"></a>6.css水平居中</h2></li><li>让我写多种 我好像写重复了 </li><li>1.margin + width</li><li>2.display：inline-block + text-align:center               </li><li>3.绝对定位+transform      <h2 id="7-div盒模型"><a href="#7-div盒模型" class="headerlink" title="7.div盒模型"></a>7.div盒模型</h2></li><li>我没明白它的考点是什么 我就写div具有内容，内外边距，边框属性。<br>写到这感觉自己更凉了，害，等我学习一波再来写下一篇。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垂直居中几种方式</title>
      <link href="2021/02/19/chui-zhi-ju-zhong-ji-chong-fang-shi/"/>
      <url>2021/02/19/chui-zhi-ju-zhong-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="4种方式"><a href="#4种方式" class="headerlink" title="4种方式"></a>4种方式</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ul><li><p>display:table-cell+vertical-align:middle(父元素设置)</p><h4 id="1-代码段："><a href="#1-代码段：" class="headerlink" title="1.代码段："></a>1.代码段：</h4><pre class="line-numbers language-none"><code class="language-none">  &lt;div id&#x3D;&quot;wrapper&quot;&gt;  &lt;div id&#x3D;&quot;cell&quot;&gt;&lt;div class&#x3D;&quot;content&quot;&gt;Content goes here&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#wrapper &#123;   display: table;  &#125;  #cell &#123;    display: table-cell;    vertical-align: middle;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优点："><a href="#2-优点：" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li><p>content 可以动态改变高度(不需在 CSS 中定义)。当 wrapper 里没有足够空间时， content 不会被截断</p><h4 id="3-缺点："><a href="#3-缺点：" class="headerlink" title="3.缺点："></a>3.缺点：</h4></li><li><p>Internet Explorer(甚至 IE8 beta)中无效，许多嵌套标签(其实没那么糟糕，另一个专题)</p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2></li></ul></li><li><p>absolute+top+margin-top</p><h4 id="1-代码段：-1"><a href="#1-代码段：-1" class="headerlink" title="1.代码段："></a>1.代码段：</h4><p> <code> &lt;div class=&quot;content&quot;&gt; Content goes here&lt;/div&gt;</code></p><pre class="line-numbers language-none"><code class="language-none">#wrapper &#123;   display: table;  &#125;  #content &#123;    position: absolute;    top: 50%;    height: 240px;    margin-top: -120px;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优点：-1"><a href="#2-优点：-1" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li>适用于所有浏览器</li></ul><ul><li>不需要嵌套标签<h4 id="3-缺点：-1"><a href="#3-缺点：-1" class="headerlink" title="3.缺点："></a>3.缺点：</h4></li></ul><ul><li>窗口小的话会消失<h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2></li></ul></li><li><p>height+margin-bottom+clear</p><h4 id="1-代码段：-2"><a href="#1-代码段：-2" class="headerlink" title="1.代码段："></a>1.代码段：</h4><p> <code> &lt;div id=&quot;floater&quot;&gt;</code><br> <code> &lt;div id=&quot;content&quot;&gt;Content here&lt;/div&gt;</code><br> <code> &lt;/div&gt;</code></p><pre class="line-numbers language-none"><code class="language-none">#floater &#123;  float: left;  height: 50%;  margin-bottom: -120px;&#125;#content &#123;  clear: both;  height: 240px;  position: relative;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优点：-2"><a href="#2-优点：-2" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li>适用于所有浏览器</li></ul><ul><li>不需要嵌套标签<h4 id="3-缺点：-2"><a href="#3-缺点：-2" class="headerlink" title="3.缺点："></a>3.缺点：</h4></li></ul><ul><li>需要额外的空元素</li></ul><h2 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2></li><li><p>absolute+top+bottom+margin</p><h4 id="1-代码段：-3"><a href="#1-代码段：-3" class="headerlink" title="1.代码段："></a>1.代码段：</h4><pre class="line-numbers language-none"><code class="language-none"> &lt;div id&#x3D;&quot;content&quot;&gt; Content here&lt;&#x2F;div&gt;#content &#123;  position: absolute;  top: 0;  bottom: 0;  left: 0;  right: 0;  margin: auto;  height: 240px;  width: 70%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优点：-3"><a href="#2-优点：-3" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li>简单<h4 id="3-缺点：-3"><a href="#3-缺点：-3" class="headerlink" title="3.缺点："></a>3.缺点：</h4></li><li>IE8无效</li><li>无足够空间，content会截断</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客</title>
      <link href="2021/02/15/bo-ke/"/>
      <url>2021/02/15/bo-ke/</url>
      
        <content type="html"><![CDATA[<h4 id="今天和昨天用了大概一天的时间，自己搭建一个博客，虽然用的时间比较长，但是有结果总归是好的。"><a href="#今天和昨天用了大概一天的时间，自己搭建一个博客，虽然用的时间比较长，但是有结果总归是好的。" class="headerlink" title="今天和昨天用了大概一天的时间，自己搭建一个博客，虽然用的时间比较长，但是有结果总归是好的。"></a>今天和昨天用了大概一天的时间，自己搭建一个博客，虽然用的时间比较长，但是有结果总归是好的。</h4><h3 id="创建博客命令"><a href="#创建博客命令" class="headerlink" title="创建博客命令"></a>创建博客命令</h3><pre><code>hexo new post ‘博客’</code></pre><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul><li>hexo new “postName” #新建文章</li></ul><ul><li>hexo new page “pageName” #新建页面</li></ul><ul><li>hexo generate #生成静态页面至 public 目录</li></ul><ul><li>hexo server #开启预览访问端口（默认端口 4000，’ctrl + c’关闭 server）</li></ul><ul><li>hexo deploy #部署到 GitHub</li></ul><ul><li>hexo help # 查看帮助</li></ul><ul><li>hexo version #查看 Hexo 的版本</li></ul><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><ul><li>hexo n == hexo new</li></ul><ul><li>hexo g == hexo generate</li></ul><ul><li>hexo s == hexo server</li></ul><ul><li>hexo d == hexo deploy</li></ul><ul><li>hexo d -g #生成并上传</li></ul><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><pre><code>打开source下的文件编辑</code></pre><h3 id="写作介绍"><a href="#写作介绍" class="headerlink" title="写作介绍"></a>写作介绍</h3><h4 id="1，字体介绍"><a href="#1，字体介绍" class="headerlink" title="1，字体介绍"></a>1，字体介绍</h4><p><em>这是斜体</em> 或 <em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p><h4 id="2，分级标题"><a href="#2，分级标题" class="headerlink" title="2，分级标题"></a>2，分级标题</h4><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3，超链接"><a href="#3，超链接" class="headerlink" title="3，超链接"></a>3，超链接</h2><p>写法：</p><p>行内形式：<a href="https://xfbxfbxfb.github.io/">我的博客</a><br>参考形式：[我的博客][1]，有一个很好的平台-[简书][2]<br>[1]:<a href="https://xfbxfbxfb.github.io/">https://xfbxfbxfb.github.io/</a><br>[2]:<a href="http://www.jianshu.com/">http://www.jianshu.com/</a><br>自动链接：我的博客地址<a href="https://xfbxfbxfb.github.io/">https://xfbxfbxfb.github.io/</a></p><h4 id="4-列表"><a href="#4-列表" class="headerlink" title="4,列表"></a>4,列表</h4><p>无序列表：<br>写法：</p><ul><li>无序列表项 1</li></ul><ul><li>无序列表项 2</li></ul><ul><li>无序列表项 3</li></ul><p>有序列表：<br>写法： 1.有序列表项 1 2.有序列表项 2 3.有序列表项 3</p><h4 id="5，插入图片"><a href="#5，插入图片" class="headerlink" title="5，插入图片"></a>5，插入图片</h4><p>在 Hexo 中插入图片，首先需要将图片放在 source/img/ 文件夹下，然后如下方式进行插入：</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1535014836&di=fafdb400041dc371b853cfb3fcc7b851&imgtype=jpg&er=1&src=http://scdn.file1.gk99.com/photo/2015-09/2015-09-11/14419580206489.jpg"></p><h4 id="6，表格"><a href="#6，表格" class="headerlink" title="6，表格"></a>6，表格</h4><table><thead><tr><th>表头 1</th><th align="left">表头 2</th><th align="center">表头 3</th><th align="right">表头 4</th></tr></thead><tbody><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> trifles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo(2)</title>
      <link href="2021/02/15/hexo-2/"/>
      <url>2021/02/15/hexo-2/</url>
      
        <content type="html"><![CDATA[<h1 id="这篇博客主要讲的是如何改变hexo的主题，让界面变得更加好看"><a href="#这篇博客主要讲的是如何改变hexo的主题，让界面变得更加好看" class="headerlink" title="这篇博客主要讲的是如何改变hexo的主题，让界面变得更加好看"></a>这篇博客主要讲的是如何改变hexo的主题，让界面变得更加好看</h1><h1 id="1-改变主题"><a href="#1-改变主题" class="headerlink" title="1.改变主题"></a>1.改变主题</h1><h2 id="1-我下载的是matery主题，有官方文档-点击打开"><a href="#1-我下载的是matery主题，有官方文档-点击打开" class="headerlink" title="1.我下载的是matery主题，有官方文档 [点击打开]"></a>1.我下载的是matery主题，有官方文档 [点击打开]</h2><p>[点击打开]：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h2 id="2-下载后根据官方文档操作"><a href="#2-下载后根据官方文档操作" class="headerlink" title="2.下载后根据官方文档操作"></a>2.下载后根据官方文档操作</h2><h2 id="3-通过百度可以找到各种个性化设计，通过自己的要求去修改"><a href="#3-通过百度可以找到各种个性化设计，通过自己的要求去修改" class="headerlink" title="3.通过百度可以找到各种个性化设计，通过自己的要求去修改"></a>3.通过百度可以找到各种个性化设计，通过自己的要求去修改</h2>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，hexo</title>
      <link href="2021/02/15/ni-hao-hexo/"/>
      <url>2021/02/15/ni-hao-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载node-js-最好下载12-x版本，这样在部署到github上不出问题"><a href="#1-下载node-js-最好下载12-x版本，这样在部署到github上不出问题" class="headerlink" title="1.下载node.js(最好下载12.x版本，这样在部署到github上不出问题)"></a>1.下载node.js(最好下载12.x版本，这样在部署到github上不出问题)</h2><h2 id="2-下载git"><a href="#2-下载git" class="headerlink" title="2.下载git"></a>2.下载git</h2><h2 id="3-创建github仓库-用自己的注册名称，为特殊的仓库"><a href="#3-创建github仓库-用自己的注册名称，为特殊的仓库" class="headerlink" title="3.创建github仓库(用自己的注册名称，为特殊的仓库)"></a>3.创建github仓库(用自己的注册名称，为特殊的仓库)</h2><h3 id="1-配置ssh-key"><a href="#1-配置ssh-key" class="headerlink" title="1.配置ssh key"></a>1.配置ssh key</h3><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<br><br>$ cd ~/. ssh       检查本机已存在的ssh密钥<br><br>如果提示：No such file or directory 说明你是第一次使用git。<br><br>ssh-keygen -t rsa -C “邮件地址”<br><br>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br></p><h2 id="4-下载hexo"><a href="#4-下载hexo" class="headerlink" title="4.下载hexo"></a>4.下载hexo</h2><h3 id="1-安装之前先来说几个注意事项："><a href="#1-安装之前先来说几个注意事项：" class="headerlink" title="1.安装之前先来说几个注意事项："></a>1.安装之前先来说几个注意事项：</h3><p>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；<br><br>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；<br><br>hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的；<br></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>$ npm install -g hexo</p><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\Workspaces\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。<br></p><p>$ cd /f/Workspaces/hexo/<br><br>$ hexo init<br><br>hexo会自动下载一些文件到这个目录，包括node_modules，<br><br><br>$ hexo g    生成<br>$ hexo s    启动服务<br>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><p>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：<a href="http://blog.liuxianan.com/windows-port-bind.html">端口冲突</a></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
