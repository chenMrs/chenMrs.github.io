<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React跨组件传值</title>
      <link href="2021/06/16/react-kua-zu-jian-chuan-zhi/"/>
      <url>2021/06/16/react-kua-zu-jian-chuan-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要跨组件传值？"><a href="#为什么要跨组件传值？" class="headerlink" title="为什么要跨组件传值？"></a>为什么要跨组件传值？</h4><pre class="line-numbers language-在单纯的父子传参中" data-language="在单纯的父子传参中"><div class="caption"><span>this.props 就可以了。子传父也是通过调用父组件的方法去改变参数变化,假如在企业项目中不</span></div><code class="language-在单纯的父子传参中">只是单纯的父子传参，还有爷爷组件和孙子组件或者重孙玄孙甚至可能...玄玄玄孙等等，就好比自己的亲戚的七大姑八大姨一样错综复杂，所以这时候 React 提供了一个非常简便和实用的东西<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h3><h4 id="1-利用-react-脚手架搭建一个项目"><a href="#1-利用-react-脚手架搭建一个项目" class="headerlink" title="1.利用 react 脚手架搭建一个项目"></a>1.利用 react 脚手架搭建一个项目</h4><h4 id="2-创建-test1-js-test2-js-context-js"><a href="#2-创建-test1-js-test2-js-context-js" class="headerlink" title="2.创建 test1.js test2.js context.js"></a>2.创建 test1.js test2.js context.js</h4><h4 id="3-context-js-文件内容"><a href="#3-context-js-文件内容" class="headerlink" title="3.context.js 文件内容"></a>3.context.js 文件内容</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">var</span> context <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> context<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-App-js-文件内容"><a href="#4-App-js-文件内容" class="headerlink" title="4.App.js 文件内容"></a>4.App.js 文件内容</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"我是爷爷"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Test1 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-Test1-js-文件内容"><a href="#5-Test1-js-文件内容" class="headerlink" title="5.Test1.js 文件内容"></a>5.Test1.js 文件内容</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Tets2 <span class="token keyword">from</span> <span class="token string">"./Tets2"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        test1        <span class="token operator">&lt;</span>Tets2 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-Tets2-js-文件内容"><a href="#6-Tets2-js-文件内容" class="headerlink" title="6.Tets2.js 文件内容"></a>6.Tets2.js 文件内容</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">"./context"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Tets2</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>          <span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Test2接受到值"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>        <span class="token punctuation">;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-运行项目"><a href="#7-运行项目" class="headerlink" title="7.运行项目"></a>7.运行项目</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>须将需要接收值的组件包裹在 Provider 内,这样所有内层组件都可以接收到这个 value 值，通俗的讲就是数据的入口。</li><li>接收值的组件,利用 Consumer 组件接收值,内部是个函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次笔试(下)</title>
      <link href="2021/03/16/di-yi-ci-bi-shi-xia/"/>
      <url>2021/03/16/di-yi-ci-bi-shi-xia/</url>
      
        <content type="html"><![CDATA[<p>对这次碰到的笔试题目，进行学习一波后写了这篇博客（题目顺序不是跟着上篇的）</p><h2 id="1-typeof与instanceof的区别"><a href="#1-typeof与instanceof的区别" class="headerlink" title="1.typeof与instanceof的区别"></a>1.typeof与instanceof的区别</h2><ul><li>typeof 一般只能六种返回值：number  string boolean  object  function undefined </li><li>注意：typeof(null)—&gt;object   typeof(NaN)—-&gt;number   typeof(undefined)—–&gt;undefined</li><li>instanceof : A instanceof B —&gt; 看A对象的原型链上有没有B原型或A对象是不是B构造函数构造出的对象<br>用instanceof可以具体知道是Array还是object也就是能分清[] {}两种对象</li><li>扩展：区分 {} [] 三种方法<ol><li>[].constructor—-&gt;function Array()<br>{}.constructor—-&gt;function object()</li><li>[] instanceof Array—&gt;true<br>{}  instanceof Array—-&gt;false</li><li>object.prototype.toString.call([])—-&gt;[object Array]<br>object.prototype.toString.call({})—-&gt;[object Object]</li></ol></li></ul><h2 id="2-div盒模型"><a href="#2-div盒模型" class="headerlink" title="2.div盒模型"></a>2.div盒模型</h2><ul><li>就是用来装页面上的元素的矩形区域。</li><li>CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型</li><li>两者的区别：width包含范围。<ol><li>在标准的盒子模型中，width指content部分宽度</li><li>在IE盒子模型中，width指content+padding+border这三个部分的宽度，故使得计算整个盒子得宽度时存在着差异</li></ol></li><li>计算差异：<ol><li>标准盒子模型的盒子宽度：左右border+左右padding+widtho</li><li>IE模型的盒子宽度：width</li></ol></li><li>CSS3中引入了box-sizing属性，box-sizing:content-box;表示标准的盒子模型；box-sizing:border-box;表示时IE盒子模型</li><li>CSS盒子模型本质是一个盒子，封装周围的HTML元素，它包括：边框，边距，填充和实际内容。</li><li>标准盒模型：一个块的总宽度=width+margin(左右)+padding(左右)+border(左右)</li><li>怪异盒模型：一个块的总宽度=width+margin(左右)(既width已经包含了padding和border值)</li></ul><h2 id="3-CSS选择器优先级"><a href="#3-CSS选择器优先级" class="headerlink" title="3.CSS选择器优先级"></a>3.CSS选择器优先级</h2><ul><li>id class 标签选择器，伪元素选择器(before after)，伪类选择器(first-child)</li><li>同一个元素引用了多个样式时，排在后面的优先级高</li><li>样式选择器的类型不同时，优先级顺序为：id选择器&gt;class选择器&gt;标签选择器&gt;继承选择器</li><li>带有 !important标记的样式属性优先级最高</li><li>样式表的来源不同时：优先级顺序是：内联样式》内部样式》外部样式&gt;浏览器自定义样式&gt;浏览器默认样式<h2 id="4-实现三栏布局"><a href="#4-实现三栏布局" class="headerlink" title="4.实现三栏布局"></a>4.实现三栏布局</h2></li><li><ol><li>自身浮动法：左栏左浮动，右栏右浮动，中间栏不浮动(中间栏得放在最后)</li></ol></li><li>代码：<pre class="line-numbers language-none"><code class="language-none">   &lt;style type&#x3D;&#39;text&#x2F;css&#39;&gt;   .box &#123;   display: flex;   height: 100 px;   width:300px;   &#125;   .left &#123;   float:left;   width:300px;   height: 100 px;   background-color: pink;   &#125;   .center &#123;   height: 100 px;   margin: 0 300px 0 300px;   background-color: yellow;   &#125;   .right &#123;   height: 100 px;   width:300px;   float: right;   background-color: skyblue;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;   &lt;article class&#x3D;&quot;main&quot;&gt;      &lt;div class&#x3D;&quot;left&quot;&gt;左&lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;right&quot;&gt;右&lt;&#x2F;div&gt;      &lt;div class&#x3D;&quot;center&quot;&gt;中         &lt;h2&gt;浮动布局&lt;&#x2F;h2&gt;      &lt;&#x2F;div&gt;       &lt;&#x2F;article&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="2"><li>绝对定位法：左右两栏采用绝对定位，中间用margin值撑开距离</li></ol></li><li>代码：<pre class="line-numbers language-none"><code class="language-none">&lt;style type&#x3D;&#39;text&#x2F;css&#39;&gt;   #center&#123;      margin-left: 20%;      width: 50%;      height: 100px;      background-color:aquamarine;   &#125;   #left&#123;      position: absolute;      top: 0;      left: 0;      height: 100px;      width: 20%;      background-color: aqua;   &#125;   #right&#123;      position:absolute;      height: 100px;      top: 0;      right: 0;      width: 20%;      background-color: antiquewhite;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;   &lt;div id&#x3D;&quot;center&quot;&gt;&lt;&#x2F;div&gt;   &lt;div id&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt;   &lt;div id&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-获取对象的key值"><a href="#5-获取对象的key值" class="headerlink" title="5.获取对象的key值"></a>5.获取对象的key值</h2></li><li>通过Object.keys来获取</li><li>代码：<pre class="line-numbers language-none"><code class="language-none">var arr &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];console.log(Object.keys(arr)); &#x2F;&#x2F; console: [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-Css水平居中"><a href="#6-Css水平居中" class="headerlink" title="6.Css水平居中"></a>6.Css水平居中</h2></li><li>1.绝对定位和margin-left: -(宽度值/2)实现水平居中</li><li>代码：<pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;   .content&#123;         width: 200px;         position: absolute;         left: 50%;         margin-left: -100px;          background-color: aqua;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;    &lt;div class&#x3D;&quot;content&quot;&gt;lalal&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>2.position:absolute + （left=0+top=0+right=0+bottom=0） + margin:auto</li><li>代码：<pre class="line-numbers language-none"><code class="language-none">&lt;style&gt;   .content&#123;      position: absolute;      width: 200px;      top: 0;      right: 0;      bottom: 0;      left: 0;      margin: auto;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="3"><li>display:table+margin: auto</li></ol></li><li>代码：<pre class="line-numbers language-none"><code class="language-none">   &lt;style&gt;   .content&#123;      display: table;      margin: auto;      height: 300px;      width: 300px;      background-color: blue;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>4.position:absolute+transform</li><li>代码：<pre class="line-numbers language-none"><code class="language-none">   &lt;style&gt;   .content&#123;      position: absolute;      left: 50%;      transform: translateX(-50%); &#x2F;* 移动元素本身50% *&#x2F;      background: aqua;   &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>结束！！</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一次笔试上</title>
      <link href="2021/03/14/di-yi-ci-bi-shi-shang/"/>
      <url>2021/03/14/di-yi-ci-bi-shi-shang/</url>
      
        <content type="html"><![CDATA[<p>今天早早的来到图书馆，赶早的抢了个好位置，正在学习的时候，之前投过的公司的hr给我发了信息，让我发简历过去，再根据它们公司的制度填了申请资料。没想到过一会就发了笔试题。一点准备都没有，脑子蒙蒙的写完了笔试题，让我印象最深刻的问题是提高css选择器优先级的方式。感觉自己从来没有考虑过这个问题。然后写完我就感觉自己没戏了。但是还是要总结一下笔试的题目。问题如下：</p><h2 id="1-数组去重"><a href="#1-数组去重" class="headerlink" title="1.数组去重"></a>1.数组去重</h2><ul><li>我用的是我一直用的方法 Array.from(new Set(arr))<h2 id="2-实现左右固定，中间适应的方式"><a href="#2-实现左右固定，中间适应的方式" class="headerlink" title="2.实现左右固定，中间适应的方式"></a>2.实现左右固定，中间适应的方式</h2></li><li>我用的是左栏左浮动 右栏右浮动 中间栏放最后<h2 id="3-获取对象key值"><a href="#3-获取对象key值" class="headerlink" title="3.获取对象key值"></a>3.获取对象key值</h2></li><li>我写了两种 循环 object.keys()<h2 id="4-typeof与instanceof区别"><a href="#4-typeof与instanceof区别" class="headerlink" title="4.typeof与instanceof区别"></a>4.typeof与instanceof区别</h2></li><li>我大致写的是typeof返回字符串 instanceof是用于判断一个变量是否某个对象的实例<h2 id="5-css选择器优先级"><a href="#5-css选择器优先级" class="headerlink" title="5.css选择器优先级"></a>5.css选择器优先级</h2></li><li>style内部写的&gt;id&gt;class&gt;标签&gt;继承<h2 id="6-css水平居中"><a href="#6-css水平居中" class="headerlink" title="6.css水平居中"></a>6.css水平居中</h2></li><li>让我写多种 我好像写重复了 </li><li>1.margin + width</li><li>2.display：inline-block + text-align:center               </li><li>3.绝对定位+transform      <h2 id="7-div盒模型"><a href="#7-div盒模型" class="headerlink" title="7.div盒模型"></a>7.div盒模型</h2></li><li>我没明白它的考点是什么 我就写div具有内容，内外边距，边框属性。<br>写到这感觉自己更凉了，害，等我学习一波再来写下一篇。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垂直居中几种方式</title>
      <link href="2021/02/19/chui-zhi-ju-zhong-ji-chong-fang-shi/"/>
      <url>2021/02/19/chui-zhi-ju-zhong-ji-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="4种方式"><a href="#4种方式" class="headerlink" title="4种方式"></a>4种方式</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ul><li><p>display:table-cell+vertical-align:middle(父元素设置)</p><h4 id="1-代码段："><a href="#1-代码段：" class="headerlink" title="1.代码段："></a>1.代码段：</h4><pre class="line-numbers language-none"><code class="language-none">  &lt;div id&#x3D;&quot;wrapper&quot;&gt;  &lt;div id&#x3D;&quot;cell&quot;&gt;&lt;div class&#x3D;&quot;content&quot;&gt;Content goes here&lt;&#x2F;div&gt; &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#wrapper &#123;   display: table;  &#125;  #cell &#123;    display: table-cell;    vertical-align: middle;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优点："><a href="#2-优点：" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li><p>content 可以动态改变高度(不需在 CSS 中定义)。当 wrapper 里没有足够空间时， content 不会被截断</p><h4 id="3-缺点："><a href="#3-缺点：" class="headerlink" title="3.缺点："></a>3.缺点：</h4></li><li><p>Internet Explorer(甚至 IE8 beta)中无效，许多嵌套标签(其实没那么糟糕，另一个专题)</p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2></li></ul></li><li><p>absolute+top+margin-top</p><h4 id="1-代码段：-1"><a href="#1-代码段：-1" class="headerlink" title="1.代码段："></a>1.代码段：</h4><p> <code> &lt;div class=&quot;content&quot;&gt; Content goes here&lt;/div&gt;</code></p><pre class="line-numbers language-none"><code class="language-none">#wrapper &#123;   display: table;  &#125;  #content &#123;    position: absolute;    top: 50%;    height: 240px;    margin-top: -120px;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优点：-1"><a href="#2-优点：-1" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li>适用于所有浏览器</li></ul><ul><li>不需要嵌套标签<h4 id="3-缺点：-1"><a href="#3-缺点：-1" class="headerlink" title="3.缺点："></a>3.缺点：</h4></li></ul><ul><li>窗口小的话会消失<h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2></li></ul></li><li><p>height+margin-bottom+clear</p><h4 id="1-代码段：-2"><a href="#1-代码段：-2" class="headerlink" title="1.代码段："></a>1.代码段：</h4><p> <code> &lt;div id=&quot;floater&quot;&gt;</code><br> <code> &lt;div id=&quot;content&quot;&gt;Content here&lt;/div&gt;</code><br> <code> &lt;/div&gt;</code></p><pre class="line-numbers language-none"><code class="language-none">#floater &#123;  float: left;  height: 50%;  margin-bottom: -120px;&#125;#content &#123;  clear: both;  height: 240px;  position: relative;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优点：-2"><a href="#2-优点：-2" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li>适用于所有浏览器</li></ul><ul><li>不需要嵌套标签<h4 id="3-缺点：-2"><a href="#3-缺点：-2" class="headerlink" title="3.缺点："></a>3.缺点：</h4></li></ul><ul><li>需要额外的空元素</li></ul><h2 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2></li><li><p>absolute+top+bottom+margin</p><h4 id="1-代码段：-3"><a href="#1-代码段：-3" class="headerlink" title="1.代码段："></a>1.代码段：</h4><pre class="line-numbers language-none"><code class="language-none"> &lt;div id&#x3D;&quot;content&quot;&gt; Content here&lt;&#x2F;div&gt;#content &#123;  position: absolute;  top: 0;  bottom: 0;  left: 0;  right: 0;  margin: auto;  height: 240px;  width: 70%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优点：-3"><a href="#2-优点：-3" class="headerlink" title="2.优点："></a>2.优点：</h4><ul><li>简单<h4 id="3-缺点：-3"><a href="#3-缺点：-3" class="headerlink" title="3.缺点："></a>3.缺点：</h4></li><li>IE8无效</li><li>无足够空间，content会截断</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客</title>
      <link href="2021/02/15/bo-ke/"/>
      <url>2021/02/15/bo-ke/</url>
      
        <content type="html"><![CDATA[<h4 id="今天和昨天用了大概一天的时间，自己搭建一个博客，虽然用的时间比较长，但是有结果总归是好的。"><a href="#今天和昨天用了大概一天的时间，自己搭建一个博客，虽然用的时间比较长，但是有结果总归是好的。" class="headerlink" title="今天和昨天用了大概一天的时间，自己搭建一个博客，虽然用的时间比较长，但是有结果总归是好的。"></a>今天和昨天用了大概一天的时间，自己搭建一个博客，虽然用的时间比较长，但是有结果总归是好的。</h4><h3 id="创建博客命令"><a href="#创建博客命令" class="headerlink" title="创建博客命令"></a>创建博客命令</h3><pre><code>hexo new post ‘博客’</code></pre><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ul><li>hexo new “postName” #新建文章</li></ul><ul><li>hexo new page “pageName” #新建页面</li></ul><ul><li>hexo generate #生成静态页面至 public 目录</li></ul><ul><li>hexo server #开启预览访问端口（默认端口 4000，’ctrl + c’关闭 server）</li></ul><ul><li>hexo deploy #部署到 GitHub</li></ul><ul><li>hexo help # 查看帮助</li></ul><ul><li>hexo version #查看 Hexo 的版本</li></ul><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><ul><li>hexo n == hexo new</li></ul><ul><li>hexo g == hexo generate</li></ul><ul><li>hexo s == hexo server</li></ul><ul><li>hexo d == hexo deploy</li></ul><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><pre><code>打开source下的文件编辑</code></pre><h3 id="写作介绍"><a href="#写作介绍" class="headerlink" title="写作介绍"></a>写作介绍</h3><h4 id="1，字体介绍"><a href="#1，字体介绍" class="headerlink" title="1，字体介绍"></a>1，字体介绍</h4><p><em>这是斜体</em> 或 <em>这也是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del></p><h4 id="2，分级标题"><a href="#2，分级标题" class="headerlink" title="2，分级标题"></a>2，分级标题</h4><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3，超链接"><a href="#3，超链接" class="headerlink" title="3，超链接"></a>3，超链接</h2><p>写法：</p><p>行内形式：<a href="https://xfbxfbxfb.github.io/">我的博客</a><br>参考形式：[我的博客][1]，有一个很好的平台-[简书][2]<br>[1]:<a href="https://xfbxfbxfb.github.io/">https://xfbxfbxfb.github.io/</a><br>[2]:<a href="http://www.jianshu.com/">http://www.jianshu.com/</a><br>自动链接：我的博客地址<a href="https://xfbxfbxfb.github.io/">https://xfbxfbxfb.github.io/</a></p><h4 id="4-列表"><a href="#4-列表" class="headerlink" title="4,列表"></a>4,列表</h4><p>无序列表：<br>写法：</p><ul><li>无序列表项 1</li></ul><ul><li>无序列表项 2</li></ul><ul><li>无序列表项 3</li></ul><p>有序列表：<br>写法： 1.有序列表项 1 2.有序列表项 2 3.有序列表项 3</p><h4 id="5，插入图片"><a href="#5，插入图片" class="headerlink" title="5，插入图片"></a>5，插入图片</h4><p>在 Hexo 中插入图片，首先需要将图片放在 source/img/ 文件夹下，然后如下方式进行插入：</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1535014836&di=fafdb400041dc371b853cfb3fcc7b851&imgtype=jpg&er=1&src=http://scdn.file1.gk99.com/photo/2015-09/2015-09-11/14419580206489.jpg"></p><h4 id="6，表格"><a href="#6，表格" class="headerlink" title="6，表格"></a>6，表格</h4><table><thead><tr><th>表头 1</th><th align="left">表头 2</th><th align="center">表头 3</th><th align="right">表头 4</th></tr></thead><tbody><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> trifles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo(2)</title>
      <link href="2021/02/15/hexo-2/"/>
      <url>2021/02/15/hexo-2/</url>
      
        <content type="html"><![CDATA[<h1 id="这篇博客主要讲的是如何改变hexo的主题，让界面变得更加好看"><a href="#这篇博客主要讲的是如何改变hexo的主题，让界面变得更加好看" class="headerlink" title="这篇博客主要讲的是如何改变hexo的主题，让界面变得更加好看"></a>这篇博客主要讲的是如何改变hexo的主题，让界面变得更加好看</h1><h1 id="1-改变主题"><a href="#1-改变主题" class="headerlink" title="1.改变主题"></a>1.改变主题</h1><h2 id="1-我下载的是matery主题，有官方文档-点击打开"><a href="#1-我下载的是matery主题，有官方文档-点击打开" class="headerlink" title="1.我下载的是matery主题，有官方文档 [点击打开]"></a>1.我下载的是matery主题，有官方文档 [点击打开]</h2><p>[点击打开]：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h2 id="2-下载后根据官方文档操作"><a href="#2-下载后根据官方文档操作" class="headerlink" title="2.下载后根据官方文档操作"></a>2.下载后根据官方文档操作</h2><h2 id="3-通过百度可以找到各种个性化设计，通过自己的要求去修改"><a href="#3-通过百度可以找到各种个性化设计，通过自己的要求去修改" class="headerlink" title="3.通过百度可以找到各种个性化设计，通过自己的要求去修改"></a>3.通过百度可以找到各种个性化设计，通过自己的要求去修改</h2>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，hexo</title>
      <link href="2021/02/15/ni-hao-hexo/"/>
      <url>2021/02/15/ni-hao-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载node-js-最好下载12-x版本，这样在部署到github上不出问题"><a href="#1-下载node-js-最好下载12-x版本，这样在部署到github上不出问题" class="headerlink" title="1.下载node.js(最好下载12.x版本，这样在部署到github上不出问题)"></a>1.下载node.js(最好下载12.x版本，这样在部署到github上不出问题)</h2><h2 id="2-下载git"><a href="#2-下载git" class="headerlink" title="2.下载git"></a>2.下载git</h2><h2 id="3-创建github仓库-用自己的注册名称，为特殊的仓库"><a href="#3-创建github仓库-用自己的注册名称，为特殊的仓库" class="headerlink" title="3.创建github仓库(用自己的注册名称，为特殊的仓库)"></a>3.创建github仓库(用自己的注册名称，为特殊的仓库)</h2><h3 id="1-配置ssh-key"><a href="#1-配置ssh-key" class="headerlink" title="1.配置ssh key"></a>1.配置ssh key</h3><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。<br><br>$ cd ~/. ssh       检查本机已存在的ssh密钥<br><br>如果提示：No such file or directory 说明你是第一次使用git。<br><br>ssh-keygen -t rsa -C “邮件地址”<br><br>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br></p><h2 id="4-下载hexo"><a href="#4-下载hexo" class="headerlink" title="4.下载hexo"></a>4.下载hexo</h2><h3 id="1-安装之前先来说几个注意事项："><a href="#1-安装之前先来说几个注意事项：" class="headerlink" title="1.安装之前先来说几个注意事项："></a>1.安装之前先来说几个注意事项：</h3><p>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；<br><br>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；<br><br>hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的；<br></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>$ npm install -g hexo</p><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\Workspaces\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。<br></p><p>$ cd /f/Workspaces/hexo/<br><br>$ hexo init<br><br>hexo会自动下载一些文件到这个目录，包括node_modules，<br><br><br>$ hexo g    生成<br>$ hexo s    启动服务<br>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><p>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：<a href="http://blog.liuxianan.com/windows-port-bind.html">端口冲突</a></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
